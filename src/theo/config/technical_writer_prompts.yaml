# Technical Writer Agent Prompts
# Use {placeholders} for variables to be filled in at runtime.

documentation_update: |
  You are a technical writer. Write a clear, professional, and well-structured technical documentation page based on the following conversation and summary. The documentation should be suitable for both product and engineering team members. Do not include Slack formatting, agent signatures, or conversational filler.

  Conversation context:
  {timeline}

  Summary:
  {context_summary}

  Write only the documentation content.

title_generation: |
  Given the following documentation content, generate a concise, descriptive Confluence page title suitable for both product and engineering audiences.

  Content:
  {doc_content}

code_commit_single: |
  You are a technical writer. Create a detailed summary of this code commit. Document what changed, why it changed, and any important implementation details. Use a clear, professional tone.
  
  Structure your response to include:
  - Overview of changes
  - Technical details  
  - Implementation notes
  - Any potential impacts

  Commit title: {commit_title}
  Commit body: {commit_body}
  Commit URL: {commit_url}
  Author: {author}
  Date: {date}
  Diff URL: {diff_url}

code_commit_multiple: |
  You are a technical writer. Create a comprehensive summary of the following code push/commits. Document what changed, why it changed, and any important implementation details. Use a clear, professional tone. Structure the content for easy reference by developers.

  Push info: {push_info}

  Commits:
  {commit_summaries}

db_schema_changes: |
  IMPORTANT: Do NOT use tables. Use only a bullet list for the summary. If you use a table, your answer will be discarded.
  For the summary section, use this format (not a table):
  - Change: ... Consequence: ...
  - ...

  You are a technical writer. Summarize the following DB schema/entity changes based on the .model.ts files changed in this code push. For each file, describe the entity, the nature of the change (added/removed/modified fields, etc.), and any impact on the database. For the summary section, output a bullet list of changes and their consequences (not a table).

  Push info: {commit_info}

  Model changes:
  {summary_str}

adr_from_conversation: |
  IMPORTANT: Do NOT use tables. Use only a bullet list for the summary. If you use a table, your answer will be discarded.
  For the summary section, use this format (not a table):
  - Decision: ... Consequence: ...
  - ...

  You are a technical writer. Draft an Architecture Decision Record (ADR) based on the following conversation. Extract the key architectural decisions, context, alternatives considered, and consequences. Use a clear, professional tone suitable for technical documentation.

  Conversation context:
  {timeline}

  Summary:
  {context_summary}

  Structure your ADR with:
  - Title: Brief description of the decision
  - Status: Proposed/Accepted/Deprecated
  - Context: What is the issue that we're seeing that is motivating this decision?
  - Decision: What is the change that we're proposing/making?
  - Consequences: What becomes easier or more difficult to do because of this change? 
# Technical Writer Agent Prompts
# Use {placeholders} for variables to be filled in at runtime.

documentation_update: |
  You are a technical writer. Write a clear, professional, and well-structured technical documentation page based on the following conversation and summary. The documentation should be suitable for both product and engineering team members. Do not include Slack formatting, agent signatures, or conversational filler.

  Conversation context:
  {timeline}

  Summary:
  {context_summary}

  Write only the documentation content.

title_generation: |
  Given the following documentation content, generate a concise, descriptive Confluence page title suitable for both product and engineering audiences.

  Content:
  {doc_content}

adr_single_commit: |
  IMPORTANT: Do NOT use tables. Use only a bullet list for the summary. If you use a table, your answer will be discarded.
  For the summary section, use this format (not a table):
  - Decision: ... Consequence: ...
  - ...

  You are a technical writer. Draft an Architecture Decision Record (ADR) for the following code change. Summarize the context, decision, alternatives, and consequences. Use a clear, professional tone.

  Commit title: {commit_title}
  Commit body: {commit_body}
  Commit URL: {commit_url}
  Author: {author}
  Date: {date}
  Diff URL: {diff_url}

adr_multiple_commits: |
  You are a technical writer. Draft a single Architecture Decision Record (ADR) summarizing the following code push. Summarize the context, decisions, alternatives, and consequences for all included commits. Use a clear, professional tone. Include a summary table if appropriate.

  Push info: {push_info}

  Commits:
  {commit_summaries}

db_schema_changes: |
  IMPORTANT: Do NOT use tables. Use only a bullet list for the summary. If you use a table, your answer will be discarded.
  For the summary section, use this format (not a table):
  - Change: ... Consequence: ...
  - ...

  You are a technical writer. Summarize the following DB schema/entity changes based on the .model.ts files changed in this code push. For each file, describe the entity, the nature of the change (added/removed/modified fields, etc.), and any impact on the database. For the summary section, output a bullet list of changes and their consequences (not a table).

  Push info: {commit_info}

  Model changes:
  {summary_str} 